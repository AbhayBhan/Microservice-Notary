{
  "service": {
    "service": "notary-microservice",
    "serviceObject": {
      "name": "notary-microservice"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "us-west-2",
      "environment": "NODE_PORT = 5000 MONGO_CONN_KEY = mongodb+srv://test:test@cluster0.kcm3d.mongodb.net/?retryWrites=true&w=majority STRIPE_PUBLISHABLE_KEY = pk_test_51NCZjzSJJY8iDfEJjDc3nysVzpyBnTljTp5ZQHyohKBuIPbadiatbxIyFcv8gbSrJ3aOoFp2mnGnVo6sXt4dtEEF00DCs1JBqH STRIPE_SECRET_KEY = sk_test_51NCZjzSJJY8iDfEJkmb41ti7enAjhKNUlt51eXxURD1bZ8nkuWhVGWrKqhjsEDx5Ea7LO451ByBMO71YDL1nCvRV00b505MSKP",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MainLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/notary-microservice-prod-main"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "notary-microservice",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notary-microservice-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notary-microservice-prod*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "notary-microservice",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MainLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/notary-microservice/prod/1687523574686-2023-06-23T12:32:54.686Z/notary-microservice.zip"
              },
              "Handler": "dist/serverless.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "notary-microservice-prod-main",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "0": "N",
                  "1": "O",
                  "2": "D",
                  "3": "E",
                  "4": "_",
                  "5": "P",
                  "6": "O",
                  "7": "R",
                  "8": "T",
                  "9": " ",
                  "10": "=",
                  "11": " ",
                  "12": "5",
                  "13": "0",
                  "14": "0",
                  "15": "0",
                  "16": " ",
                  "17": "M",
                  "18": "O",
                  "19": "N",
                  "20": "G",
                  "21": "O",
                  "22": "_",
                  "23": "C",
                  "24": "O",
                  "25": "N",
                  "26": "N",
                  "27": "_",
                  "28": "K",
                  "29": "E",
                  "30": "Y",
                  "31": " ",
                  "32": "=",
                  "33": " ",
                  "34": "m",
                  "35": "o",
                  "36": "n",
                  "37": "g",
                  "38": "o",
                  "39": "d",
                  "40": "b",
                  "41": "+",
                  "42": "s",
                  "43": "r",
                  "44": "v",
                  "45": ":",
                  "46": "/",
                  "47": "/",
                  "48": "t",
                  "49": "e",
                  "50": "s",
                  "51": "t",
                  "52": ":",
                  "53": "t",
                  "54": "e",
                  "55": "s",
                  "56": "t",
                  "57": "@",
                  "58": "c",
                  "59": "l",
                  "60": "u",
                  "61": "s",
                  "62": "t",
                  "63": "e",
                  "64": "r",
                  "65": "0",
                  "66": ".",
                  "67": "k",
                  "68": "c",
                  "69": "m",
                  "70": "3",
                  "71": "d",
                  "72": ".",
                  "73": "m",
                  "74": "o",
                  "75": "n",
                  "76": "g",
                  "77": "o",
                  "78": "d",
                  "79": "b",
                  "80": ".",
                  "81": "n",
                  "82": "e",
                  "83": "t",
                  "84": "/",
                  "85": "?",
                  "86": "r",
                  "87": "e",
                  "88": "t",
                  "89": "r",
                  "90": "y",
                  "91": "W",
                  "92": "r",
                  "93": "i",
                  "94": "t",
                  "95": "e",
                  "96": "s",
                  "97": "=",
                  "98": "t",
                  "99": "r",
                  "100": "u",
                  "101": "e",
                  "102": "&",
                  "103": "w",
                  "104": "=",
                  "105": "m",
                  "106": "a",
                  "107": "j",
                  "108": "o",
                  "109": "r",
                  "110": "i",
                  "111": "t",
                  "112": "y",
                  "113": " ",
                  "114": "S",
                  "115": "T",
                  "116": "R",
                  "117": "I",
                  "118": "P",
                  "119": "E",
                  "120": "_",
                  "121": "P",
                  "122": "U",
                  "123": "B",
                  "124": "L",
                  "125": "I",
                  "126": "S",
                  "127": "H",
                  "128": "A",
                  "129": "B",
                  "130": "L",
                  "131": "E",
                  "132": "_",
                  "133": "K",
                  "134": "E",
                  "135": "Y",
                  "136": " ",
                  "137": "=",
                  "138": " ",
                  "139": "p",
                  "140": "k",
                  "141": "_",
                  "142": "t",
                  "143": "e",
                  "144": "s",
                  "145": "t",
                  "146": "_",
                  "147": "5",
                  "148": "1",
                  "149": "N",
                  "150": "C",
                  "151": "Z",
                  "152": "j",
                  "153": "z",
                  "154": "S",
                  "155": "J",
                  "156": "J",
                  "157": "Y",
                  "158": "8",
                  "159": "i",
                  "160": "D",
                  "161": "f",
                  "162": "E",
                  "163": "J",
                  "164": "j",
                  "165": "D",
                  "166": "c",
                  "167": "3",
                  "168": "n",
                  "169": "y",
                  "170": "s",
                  "171": "V",
                  "172": "z",
                  "173": "p",
                  "174": "y",
                  "175": "B",
                  "176": "n",
                  "177": "T",
                  "178": "l",
                  "179": "j",
                  "180": "T",
                  "181": "p",
                  "182": "5",
                  "183": "Z",
                  "184": "Q",
                  "185": "H",
                  "186": "y",
                  "187": "o",
                  "188": "h",
                  "189": "K",
                  "190": "B",
                  "191": "u",
                  "192": "I",
                  "193": "P",
                  "194": "b",
                  "195": "a",
                  "196": "d",
                  "197": "i",
                  "198": "a",
                  "199": "t",
                  "200": "b",
                  "201": "x",
                  "202": "I",
                  "203": "y",
                  "204": "F",
                  "205": "c",
                  "206": "v",
                  "207": "8",
                  "208": "g",
                  "209": "b",
                  "210": "S",
                  "211": "r",
                  "212": "J",
                  "213": "3",
                  "214": "a",
                  "215": "O",
                  "216": "o",
                  "217": "F",
                  "218": "p",
                  "219": "2",
                  "220": "m",
                  "221": "n",
                  "222": "G",
                  "223": "n",
                  "224": "V",
                  "225": "o",
                  "226": "6",
                  "227": "s",
                  "228": "X",
                  "229": "t",
                  "230": "4",
                  "231": "d",
                  "232": "t",
                  "233": "E",
                  "234": "E",
                  "235": "F",
                  "236": "0",
                  "237": "0",
                  "238": "D",
                  "239": "C",
                  "240": "s",
                  "241": "1",
                  "242": "J",
                  "243": "B",
                  "244": "q",
                  "245": "H",
                  "246": " ",
                  "247": "S",
                  "248": "T",
                  "249": "R",
                  "250": "I",
                  "251": "P",
                  "252": "E",
                  "253": "_",
                  "254": "S",
                  "255": "E",
                  "256": "C",
                  "257": "R",
                  "258": "E",
                  "259": "T",
                  "260": "_",
                  "261": "K",
                  "262": "E",
                  "263": "Y",
                  "264": " ",
                  "265": "=",
                  "266": " ",
                  "267": "s",
                  "268": "k",
                  "269": "_",
                  "270": "t",
                  "271": "e",
                  "272": "s",
                  "273": "t",
                  "274": "_",
                  "275": "5",
                  "276": "1",
                  "277": "N",
                  "278": "C",
                  "279": "Z",
                  "280": "j",
                  "281": "z",
                  "282": "S",
                  "283": "J",
                  "284": "J",
                  "285": "Y",
                  "286": "8",
                  "287": "i",
                  "288": "D",
                  "289": "f",
                  "290": "E",
                  "291": "J",
                  "292": "k",
                  "293": "m",
                  "294": "b",
                  "295": "4",
                  "296": "1",
                  "297": "t",
                  "298": "i",
                  "299": "7",
                  "300": "e",
                  "301": "n",
                  "302": "A",
                  "303": "j",
                  "304": "h",
                  "305": "K",
                  "306": "N",
                  "307": "U",
                  "308": "l",
                  "309": "t",
                  "310": "5",
                  "311": "1",
                  "312": "e",
                  "313": "X",
                  "314": "x",
                  "315": "U",
                  "316": "R",
                  "317": "D",
                  "318": "1",
                  "319": "b",
                  "320": "Z",
                  "321": "8",
                  "322": "n",
                  "323": "k",
                  "324": "u",
                  "325": "W",
                  "326": "h",
                  "327": "V",
                  "328": "G",
                  "329": "W",
                  "330": "r",
                  "331": "K",
                  "332": "q",
                  "333": "h",
                  "334": "j",
                  "335": "s",
                  "336": "E",
                  "337": "D",
                  "338": "x",
                  "339": "5",
                  "340": "E",
                  "341": "a",
                  "342": "7",
                  "343": "L",
                  "344": "O",
                  "345": "4",
                  "346": "5",
                  "347": "1",
                  "348": "B",
                  "349": "y",
                  "350": "B",
                  "351": "M",
                  "352": "O",
                  "353": "7",
                  "354": "1",
                  "355": "Y",
                  "356": "D",
                  "357": "L",
                  "358": "1",
                  "359": "n",
                  "360": "C",
                  "361": "v",
                  "362": "R",
                  "363": "V",
                  "364": "0",
                  "365": "0",
                  "366": "b",
                  "367": "5",
                  "368": "0",
                  "369": "5",
                  "370": "M",
                  "371": "S",
                  "372": "K",
                  "373": "P"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MainLogGroup"
            ]
          },
          "MainLambdaVersion6YBdZFXANErXAP1x3wUaIg97i01qiLOkV40HzHeeg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MainLambdaFunction"
              },
              "CodeSha256": "D+hHP1dxU4qN5GWNiMBGlw/tedIz0viIiksrXt9Wpok="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-notary-microservice",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1687523503759": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "MainLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MainLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-notary-microservice-prod-ServerlessDeploymentBucketName"
            }
          },
          "MainLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MainLambdaVersion6YBdZFXANErXAP1x3wUaIg97i01qiLOkV40HzHeeg"
            },
            "Export": {
              "Name": "sls-notary-microservice-prod-MainLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-notary-microservice-prod-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "noPrependStageInUrl": true
      }
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "main": {
        "handler": "dist/serverless.handler",
        "events": [
          {
            "http": {
              "method": "any",
              "path": "",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "any",
              "path": "{proxy+}",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "notary-microservice-prod-main",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "MainLambdaVersion6YBdZFXANErXAP1x3wUaIg97i01qiLOkV40HzHeeg"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yaml",
    "initialServerlessConfig": {
      "service": "notary-microservice",
      "useDotenv": true,
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "E:\\Notary\\Microservice-Notary\\.serverless\\notary-microservice.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/notary-microservice/prod/1687523574686-2023-06-23T12:32:54.686Z",
    "artifact": "notary-microservice.zip"
  }
}